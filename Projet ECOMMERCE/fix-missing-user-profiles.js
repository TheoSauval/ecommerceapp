const { supabase, supabasePublic } = require('./config/supabase');

async function fixMissingUserProfiles() {
    console.log('üîß Diagnostic et correction des profils utilisateurs manquants...\n');

    try {
        // 1. R√©cup√©rer tous les utilisateurs de auth.users
        console.log('üìã R√©cup√©ration de tous les utilisateurs auth.users...');
        const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
        
        if (authError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', authError);
            return;
        }

        console.log(`‚úÖ ${authUsers.users.length} utilisateurs trouv√©s dans auth.users`);

        // 2. R√©cup√©rer tous les profils existants
        console.log('\nüìã R√©cup√©ration de tous les profils utilisateurs...');
        const { data: existingProfiles, error: profileError } = await supabase
            .from('user_profiles')
            .select('*');

        if (profileError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', profileError);
            return;
        }

        console.log(`‚úÖ ${existingProfiles.length} profils trouv√©s dans user_profiles`);

        // 3. Identifier les utilisateurs sans profil
        const existingProfileIds = existingProfiles.map(p => p.id);
        const usersWithoutProfile = authUsers.users.filter(user => !existingProfileIds.includes(user.id));

        console.log(`\nüîç ${usersWithoutProfile.length} utilisateurs sans profil identifi√©s`);

        if (usersWithoutProfile.length === 0) {
            console.log('‚úÖ Tous les utilisateurs ont un profil !');
            return;
        }

        // 4. Cr√©er les profils manquants
        console.log('\nüîß Cr√©ation des profils manquants...');
        let createdCount = 0;
        let errorCount = 0;

        for (const user of usersWithoutProfile) {
            try {
                console.log(`\nüë§ Traitement de l'utilisateur: ${user.email} (${user.id})`);
                
                // Extraire les m√©tadonn√©es
                const metadata = user.user_metadata || {};
                const nom = metadata.nom || 'Utilisateur';
                const prenom = metadata.prenom || 'Anonyme';
                const age = metadata.age || 18;
                const role = metadata.role || 'user';

                console.log(`üìã M√©tadonn√©es extraites: nom="${nom}", prenom="${prenom}", age=${age}, role="${role}"`);

                // Cr√©er le profil
                const { data: newProfile, error: createError } = await supabase
                    .from('user_profiles')
                    .insert({
                        id: user.id,
                        nom,
                        prenom,
                        age,
                        role
                    })
                    .select()
                    .single();

                if (createError) {
                    console.error(`‚ùå Erreur lors de la cr√©ation du profil pour ${user.email}:`, createError);
                    errorCount++;
                } else {
                    console.log(`‚úÖ Profil cr√©√© avec succ√®s pour ${user.email}:`, newProfile);
                    createdCount++;
                }

            } catch (error) {
                console.error(`‚ùå Erreur lors du traitement de ${user.email}:`, error);
                errorCount++;
            }
        }

        // 5. R√©sum√©
        console.log('\nüìä R√©sum√© de l\'op√©ration:');
        console.log(`‚úÖ Profils cr√©√©s: ${createdCount}`);
        console.log(`‚ùå Erreurs: ${errorCount}`);
        console.log(`üìã Total utilisateurs trait√©s: ${usersWithoutProfile.length}`);

        // 6. V√©rification finale
        console.log('\nüîç V√©rification finale...');
        const { data: finalProfiles, error: finalError } = await supabase
            .from('user_profiles')
            .select('*');

        if (finalError) {
            console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
        } else {
            console.log(`‚úÖ Total de profils apr√®s correction: ${finalProfiles.length}`);
            
            if (finalProfiles.length === authUsers.users.length) {
                console.log('üéâ Tous les utilisateurs ont maintenant un profil !');
            } else {
                console.log('‚ö†Ô∏è  Il reste encore des utilisateurs sans profil');
            }
        }

    } catch (error) {
        console.error('‚ùå Erreur g√©n√©rale:', error);
    }
}

// Fonction pour v√©rifier un utilisateur sp√©cifique
async function checkSpecificUser(userId) {
    console.log(`üîç V√©rification de l'utilisateur sp√©cifique: ${userId}\n`);

    try {
        // 1. V√©rifier dans auth.users
        const { data: { user }, error: authError } = await supabase.auth.admin.getUserById(userId);
        
        if (authError) {
            console.error('‚ùå Erreur auth.users:', authError);
            return;
        }

        console.log('‚úÖ Utilisateur trouv√© dans auth.users:', {
            id: user.id,
            email: user.email,
            metadata: user.user_metadata
        });

        // 2. V√©rifier dans user_profiles
        const { data: profile, error: profileError } = await supabase
            .from('user_profiles')
            .select('*')
            .eq('id', userId)
            .single();

        if (profileError) {
            if (profileError.code === 'PGRST116') {
                console.log('‚ùå Profil manquant dans user_profiles');
                
                // Cr√©er le profil manquant
                const metadata = user.user_metadata || {};
                const { data: newProfile, error: createError } = await supabase
                    .from('user_profiles')
                    .insert({
                        id: userId,
                        nom: metadata.nom || 'Utilisateur',
                        prenom: metadata.prenom || 'Anonyme',
                        age: metadata.age || 18,
                        role: metadata.role || 'user'
                    })
                    .select()
                    .single();

                if (createError) {
                    console.error('‚ùå Erreur lors de la cr√©ation du profil:', createError);
                } else {
                    console.log('‚úÖ Profil cr√©√© avec succ√®s:', newProfile);
                }
            } else {
                console.error('‚ùå Erreur user_profiles:', profileError);
            }
        } else {
            console.log('‚úÖ Profil trouv√© dans user_profiles:', profile);
        }

    } catch (error) {
        console.error('‚ùå Erreur:', error);
    }
}

// Fonction pour v√©rifier le trigger
async function checkTrigger() {
    console.log('üîß V√©rification du trigger handle_new_user...\n');

    try {
        // V√©rifier si le trigger existe
        const { data: triggers, error: triggerError } = await supabase
            .rpc('get_triggers_info');

        if (triggerError) {
            console.log('‚ö†Ô∏è  Impossible de v√©rifier les triggers directement');
            
            // Test manuel du trigger
            console.log('üß™ Test manuel du trigger...');
            
            // Cr√©er un utilisateur de test
            const testEmail = `test-${Date.now()}@example.com`;
            const { data: testUser, error: createError } = await supabase.auth.admin.createUser({
                email: testEmail,
                password: 'testpassword123',
                email_confirm: true,
                user_metadata: {
                    nom: 'Test',
                    prenom: 'User',
                    age: 25,
                    role: 'user'
                }
            });

            if (createError) {
                console.error('‚ùå Erreur lors de la cr√©ation de l\'utilisateur de test:', createError);
                return;
            }

            console.log('‚úÖ Utilisateur de test cr√©√©:', testUser.user.id);

            // Attendre un peu pour que le trigger s'ex√©cute
            await new Promise(resolve => setTimeout(resolve, 1000));

            // V√©rifier si le profil a √©t√© cr√©√©
            const { data: testProfile, error: profileError } = await supabase
                .from('user_profiles')
                .select('*')
                .eq('id', testUser.user.id)
                .single();

            if (profileError) {
                console.log('‚ùå Le trigger ne fonctionne pas - profil non cr√©√© automatiquement');
                
                // Cr√©er le profil manuellement
                const { data: manualProfile, error: manualError } = await supabase
                    .from('user_profiles')
                    .insert({
                        id: testUser.user.id,
                        nom: 'Test',
                        prenom: 'User',
                        age: 25,
                        role: 'user'
                    })
                    .select()
                    .single();

                if (manualError) {
                    console.error('‚ùå Erreur lors de la cr√©ation manuelle:', manualError);
                } else {
                    console.log('‚úÖ Profil cr√©√© manuellement:', manualProfile);
                }
            } else {
                console.log('‚úÖ Le trigger fonctionne - profil cr√©√© automatiquement:', testProfile);
            }

            // Nettoyer l'utilisateur de test
            await supabase.auth.admin.deleteUser(testUser.user.id);
            console.log('üßπ Utilisateur de test supprim√©');

        } else {
            console.log('üìã Triggers trouv√©s:', triggers);
        }

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification du trigger:', error);
    }
}

// Ex√©cuter les fonctions selon les arguments
async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log('üîß Script de correction des profils utilisateurs manquants');
        console.log('Usage:');
        console.log('  node fix-missing-user-profiles.js                    # Corriger tous les profils manquants');
        console.log('  node fix-missing-user-profiles.js check <userId>     # V√©rifier un utilisateur sp√©cifique');
        console.log('  node fix-missing-user-profiles.js trigger            # V√©rifier le trigger');
        return;
    }

    const command = args[0];

    switch (command) {
        case 'check':
            if (args[1]) {
                await checkSpecificUser(args[1]);
            } else {
                console.log('‚ùå Veuillez sp√©cifier un userId');
            }
            break;
        case 'trigger':
            await checkTrigger();
            break;
        default:
            await fixMissingUserProfiles();
    }
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
    main();
}

module.exports = {
    fixMissingUserProfiles,
    checkSpecificUser,
    checkTrigger
}; 