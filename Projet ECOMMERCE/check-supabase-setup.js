const { supabase } = require('./config/supabase');

async function checkSupabaseSetup() {
    console.log('üîç V√©rification de la configuration Supabase...\n');

    try {
        // 1. V√©rifier la connexion
        console.log('1. Test de connexion...');
        const { data: testData, error: testError } = await supabase
            .from('user_profiles')
            .select('count')
            .limit(1);
        
        if (testError) {
            console.error('‚ùå Erreur de connexion:', testError.message);
            return false;
        }
        console.log('‚úÖ Connexion r√©ussie\n');

        // 2. V√©rifier les buckets de stockage
        console.log('2. V√©rification des buckets de stockage...');
        const { data: buckets, error: bucketError } = await supabase.storage.listBuckets();
        
        if (bucketError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des buckets:', bucketError.message);
            return false;
        }

        const bucketNames = buckets.map(b => b.name);
        console.log('üì¶ Buckets disponibles:', bucketNames);

        const productImagesBucket = buckets.find(b => b.name === 'product-images');
        if (!productImagesBucket) {
            console.error('‚ùå Bucket "product-images" non trouv√©');
            console.log('üí° Veuillez ex√©cuter le script supabase-storage-setup.sql dans l\'√©diteur SQL de Supabase');
            return false;
        }
        console.log('‚úÖ Bucket "product-images" trouv√©\n');

        // 3. V√©rifier les tables principales
        console.log('3. V√©rification des tables principales...');
        const tablesToCheck = [
            'user_profiles',
            'vendors', 
            'products',
            'product_variants',
            'colors',
            'heights'
        ];

        for (const tableName of tablesToCheck) {
            try {
                const { data, error } = await supabase
                    .from(tableName)
                    .select('count')
                    .limit(1);
                
                if (error) {
                    console.error(`‚ùå Table "${tableName}" non accessible:`, error.message);
                    return false;
                }
                console.log(`‚úÖ Table "${tableName}" accessible`);
            } catch (err) {
                console.error(`‚ùå Erreur avec la table "${tableName}":`, err.message);
                return false;
            }
        }
        console.log('');

        // 4. V√©rifier les donn√©es de base
        console.log('4. V√©rification des donn√©es de base...');
        
        // V√©rifier les couleurs
        const { data: colors, error: colorsError } = await supabase
            .from('colors')
            .select('*')
            .limit(5);
        
        if (colorsError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des couleurs:', colorsError.message);
        } else {
            console.log(`‚úÖ ${colors.length} couleurs trouv√©es`);
        }

        // V√©rifier les tailles
        const { data: heights, error: heightsError } = await supabase
            .from('heights')
            .select('*')
            .limit(5);
        
        if (heightsError) {
            console.error('‚ùå Erreur lors de la r√©cup√©ration des tailles:', heightsError.message);
        } else {
            console.log(`‚úÖ ${heights.length} tailles trouv√©es`);
        }

        console.log('\nüéâ Configuration Supabase v√©rifi√©e avec succ√®s !');
        console.log('\nüìã Prochaines √©tapes:');
        console.log('1. Assurez-vous que votre serveur backend est d√©marr√©');
        console.log('2. Testez l\'ajout d\'un produit avec images');
        console.log('3. V√©rifiez que les images s\'affichent correctement');
        
        return true;

    } catch (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error.message);
        return false;
    }
}

// Ex√©cuter la v√©rification si le script est appel√© directement
if (require.main === module) {
    checkSupabaseSetup()
        .then(success => {
            if (!success) {
                console.log('\nüîß Actions √† effectuer:');
                console.log('1. V√©rifiez vos variables d\'environnement (.env)');
                console.log('2. Ex√©cutez le script supabase-storage-setup.sql dans Supabase');
                console.log('3. V√©rifiez que votre projet Supabase est actif');
                process.exit(1);
            }
        })
        .catch(error => {
            console.error('‚ùå Erreur fatale:', error);
            process.exit(1);
        });
}

module.exports = { checkSupabaseSetup }; 