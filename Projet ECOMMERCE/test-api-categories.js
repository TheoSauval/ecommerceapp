const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

async function testCategoriesAPI() {
    console.log('üß™ Test de l\'API des cat√©gories...\n');
    
    try {
        // Test 1: R√©cup√©rer les cat√©gories disponibles
        console.log('1Ô∏è‚É£ Test GET /api/products/categories');
        const categoriesResponse = await axios.get(`${BASE_URL}/products/categories`);
        console.log('‚úÖ Succ√®s!');
        console.log('üìã Cat√©gories r√©cup√©r√©es:', categoriesResponse.data);
        console.log('üìä Nombre de cat√©gories:', categoriesResponse.data.length);
        console.log('');
        
        // Test 2: Tester le filtrage par cat√©gorie pour chaque cat√©gorie
        console.log('2Ô∏è‚É£ Test du filtrage par cat√©gorie');
        for (const category of categoriesResponse.data) {
            try {
                console.log(`   Test pour la cat√©gorie: "${category}"`);
                const productsResponse = await axios.get(`${BASE_URL}/products/category/${encodeURIComponent(category)}?page=1&limit=5`);
                
                console.log(`   ‚úÖ ${productsResponse.data.products.length} produits trouv√©s`);
                console.log(`   üìÑ Page ${productsResponse.data.currentPage} sur ${productsResponse.data.totalPages}`);
                
                if (productsResponse.data.products.length > 0) {
                    console.log(`   üè∑Ô∏è  Exemple de produit: ${productsResponse.data.products[0].nom}`);
                }
                console.log('');
            } catch (error) {
                console.log(`   ‚ùå Erreur pour "${category}":`, error.response?.data?.message || error.message);
                console.log('');
            }
        }
        
        // Test 3: Tester la pagination
        console.log('3Ô∏è‚É£ Test de la pagination');
        if (categoriesResponse.data.length > 0) {
            const firstCategory = categoriesResponse.data[0];
            console.log(`   Test pagination pour: "${firstCategory}"`);
            
            const page1Response = await axios.get(`${BASE_URL}/products/category/${encodeURIComponent(firstCategory)}?page=1&limit=2`);
            const page2Response = await axios.get(`${BASE_URL}/products/category/${encodeURIComponent(firstCategory)}?page=2&limit=2`);
            
            console.log(`   üìÑ Page 1: ${page1Response.data.products.length} produits`);
            console.log(`   üìÑ Page 2: ${page2Response.data.products.length} produits`);
            console.log(`   üìä Total pages: ${page1Response.data.totalPages}`);
            console.log('');
        }
        
        // Test 4: Tester avec une cat√©gorie inexistante
        console.log('4Ô∏è‚É£ Test avec une cat√©gorie inexistante');
        try {
            await axios.get(`${BASE_URL}/products/category/CategorieInexistante?page=1&limit=5`);
            console.log('   ‚ö†Ô∏è  Cat√©gorie inexistante retourne des donn√©es (normal si aucun produit)');
        } catch (error) {
            console.log('   ‚úÖ Erreur attendue pour cat√©gorie inexistante:', error.response?.status);
        }
        console.log('');
        
        // Test 5: V√©rifier la structure des donn√©es
        console.log('5Ô∏è‚É£ V√©rification de la structure des donn√©es');
        if (categoriesResponse.data.length > 0) {
            const firstCategory = categoriesResponse.data[0];
            const productsResponse = await axios.get(`${BASE_URL}/products/category/${encodeURIComponent(firstCategory)}?page=1&limit=1`);
            
            if (productsResponse.data.products.length > 0) {
                const product = productsResponse.data.products[0];
                console.log('   ‚úÖ Structure du produit:');
                console.log(`      - ID: ${product.id}`);
                console.log(`      - Nom: ${product.nom}`);
                console.log(`      - Prix: ${product.prix_base}`);
                console.log(`      - Cat√©gorie: ${product.categorie}`);
                console.log(`      - Variantes: ${product.variants?.length || 0}`);
            }
        }
        
        console.log('\nüéâ Tous les tests sont termin√©s!');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.response?.data || error.message);
        
        if (error.code === 'ECONNREFUSED') {
            console.log('\nüí° Le serveur n\'est pas d√©marr√©. D√©marrez-le avec:');
            console.log('   npm start');
        }
    }
}

// Fonction pour v√©rifier la base de donn√©es
async function checkDatabase() {
    console.log('üîç V√©rification de la base de donn√©es...\n');
    
    try {
        // Test de connexion √† l'API
        const response = await axios.get(`${BASE_URL}/products?page=1&limit=1`);
        console.log('‚úÖ Connexion √† l\'API r√©ussie');
        
        // V√©rifier s'il y a des produits
        const productsResponse = await axios.get(`${BASE_URL}/products?page=1&limit=10`);
        console.log(`üì¶ ${productsResponse.data.products.length} produits trouv√©s`);
        
        if (productsResponse.data.products.length === 0) {
            console.log('‚ö†Ô∏è  Aucun produit trouv√©. Ex√©cutez le script insert-test-categories.sql');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    }
}

// Ex√©cuter les tests
async function runTests() {
    console.log('üöÄ D√©marrage des tests de l\'API des cat√©gories\n');
    
    await checkDatabase();
    console.log('');
    await testCategoriesAPI();
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
    runTests();
}

module.exports = { testCategoriesAPI, checkDatabase }; 