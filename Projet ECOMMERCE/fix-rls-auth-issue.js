const { supabase, supabasePublic } = require('./config/supabase');

async function diagnoseRLSAuthIssue() {
    console.log('üîç Diagnostic du probl√®me d\'authentification RLS\n');

    // Test 1: V√©rifier les utilisateurs existants
    console.log('1Ô∏è‚É£ V√©rification des utilisateurs existants...');
    const { data: { users }, error: usersError } = await supabase.auth.admin.listUsers();
    
    if (usersError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des utilisateurs:', usersError);
        return;
    }

    console.log(`‚úÖ ${users.length} utilisateurs trouv√©s dans auth.users`);
    
    // Prendre le premier utilisateur pour les tests
    const testUser = users[0];
    console.log('üë§ Utilisateur de test:', {
        id: testUser.id,
        email: testUser.email,
        metadata: testUser.user_metadata
    });

    // Test 2: V√©rifier les profils existants
    console.log('\n2Ô∏è‚É£ V√©rification des profils existants...');
    const { data: profiles, error: profilesError } = await supabase
        .from('user_profiles')
        .select('*');

    if (profilesError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des profils:', profilesError);
    } else {
        console.log(`‚úÖ ${profiles.length} profils trouv√©s dans user_profiles`);
        if (profiles.length > 0) {
            console.log('üìã Premier profil:', profiles[0]);
        }
    }

    // Test 3: Tester l'acc√®s avec le client public (comme le middleware)
    console.log('\n3Ô∏è‚É£ Test d\'acc√®s avec client public (comme le middleware)...');
    const { data: publicProfile, error: publicError } = await supabasePublic
        .from('user_profiles')
        .select('*')
        .eq('id', testUser.id)
        .single();

    if (publicError) {
        console.log('‚ùå Erreur avec client public (attendu):', publicError.message);
    } else {
        console.log('‚úÖ Acc√®s r√©ussi avec client public:', publicProfile);
    }

    // Test 4: Tester l'acc√®s avec le client admin
    console.log('\n4Ô∏è‚É£ Test d\'acc√®s avec client admin...');
    const { data: adminProfile, error: adminError } = await supabase
        .from('user_profiles')
        .select('*')
        .eq('id', testUser.id)
        .single();

    if (adminError) {
        console.error('‚ùå Erreur avec client admin:', adminError);
    } else {
        console.log('‚úÖ Acc√®s r√©ussi avec client admin:', adminProfile);
    }

    // Test 5: V√©rifier les politiques RLS
    console.log('\n5Ô∏è‚É£ V√©rification des politiques RLS...');
    const { data: rlsPolicies, error: rlsError } = await supabase
        .rpc('get_rls_policies', { table_name: 'user_profiles' })
        .catch(() => ({ data: null, error: 'Fonction non disponible' }));

    if (rlsError) {
        console.log('‚ÑπÔ∏è Impossible de r√©cup√©rer les politiques RLS via RPC');
    } else {
        console.log('üìã Politiques RLS:', rlsPolicies);
    }

    return { testUser, profiles };
}

async function fixRLSAuthIssue() {
    console.log('\nüîß Correction du probl√®me d\'authentification RLS\n');

    // Solution 1: Modifier le middleware pour utiliser le client admin
    console.log('1Ô∏è‚É£ Modification du middleware d\'authentification...');
    
    // Cr√©er une version corrig√©e du middleware
    const correctedMiddleware = `
// middleware/auth.js - VERSION CORRIG√âE
const { supabase } = require('../config/supabase');

const authenticateToken = async (req, res, next) => {
    try {
        console.log('üîê Middleware d\'authentification appel√©');

        const authHeader = req.headers.authorization;
        const token = authHeader && authHeader.split(' ')[1];

        if (!token) {
            return res.status(401).json({ message: 'Token d\'acc√®s requis' });
        }

        // V√©rifier le token avec Supabase
        const { data: { user }, error } = await supabase.auth.getUser(token);

        if (error || !user) {
            return res.status(401).json({ message: 'Token invalide' });
        }

        console.log('‚úÖ Utilisateur authentifi√©:', user.id);

        // R√©cup√©rer le profil utilisateur avec le client admin (bypass RLS)
        const { data: profile, error: profileError } = await supabase
            .from('user_profiles')
            .select('*')
            .eq('id', user.id)
            .single();

        if (profileError) {
            console.log('‚ùå Erreur profil:', profileError);
            return res.status(401).json({ message: 'Profil utilisateur introuvable' });
        }

        console.log('‚úÖ Profil r√©cup√©r√©:', profile);

        // Ajouter les informations utilisateur √† la requ√™te
        req.user = {
            ...profile,
            email: user.email
        };

        next();
    } catch (error) {
        console.error('‚ùå Erreur d\'authentification:', error);
        return res.status(401).json({ message: 'Erreur d\'authentification' });
    }
};

module.exports = { authenticateToken };
`;

    console.log('üìù Code du middleware corrig√© g√©n√©r√©');
    console.log('üí° Le probl√®me √©tait que le middleware utilisait supabasePublic au lieu de supabase');

    // Solution 2: Alternative - D√©sactiver temporairement RLS pour les tests
    console.log('\n2Ô∏è‚É£ Alternative - D√©sactiver temporairement RLS...');
    
    const disableRLS = `
-- D√©sactiver temporairement RLS pour les tests
ALTER TABLE public.user_profiles DISABLE ROW LEVEL SECURITY;

-- OU cr√©er une politique plus permissive pour les tests
DROP POLICY IF EXISTS "Users can view own profile" ON public.user_profiles;
CREATE POLICY "Allow all profile access for testing" ON public.user_profiles FOR ALL USING (true);
`;

    console.log('üìù Script SQL pour d√©sactiver RLS g√©n√©r√©');

    return { correctedMiddleware, disableRLS };
}

async function testFixedAuth() {
    console.log('\nüß™ Test de l\'authentification corrig√©e\n');

    // Simuler une requ√™te avec token
    const testToken = 'test-token'; // √Ä remplacer par un vrai token
    
    try {
        // Test avec le client admin
        const { data: { user }, error } = await supabase.auth.getUser(testToken);
        
        if (error) {
            console.log('‚ùå Test avec token invalide (attendu):', error.message);
        } else {
            console.log('‚úÖ Test r√©ussi avec token valide');
            
            // Tester la r√©cup√©ration du profil
            const { data: profile, error: profileError } = await supabase
                .from('user_profiles')
                .select('*')
                .eq('id', user.id)
                .single();

            if (profileError) {
                console.log('‚ùå Erreur profil:', profileError);
            } else {
                console.log('‚úÖ Profil r√©cup√©r√© avec succ√®s:', profile);
            }
        }
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error);
    }
}

// Ex√©cution du diagnostic
async function main() {
    try {
        const { testUser, profiles } = await diagnoseRLSAuthIssue();
        const { correctedMiddleware, disableRLS } = await fixRLSAuthIssue();
        
        console.log('\nüìã R√âSUM√â DU DIAGNOSTIC');
        console.log('========================');
        console.log('‚ùå Probl√®me identifi√©: Le middleware utilise supabasePublic (client anonyme)');
        console.log('‚úÖ Solution: Utiliser supabase (client admin) dans le middleware');
        console.log('üîß Alternative: D√©sactiver temporairement RLS pour les tests');
        
        console.log('\nüìù ACTIONS RECOMMAND√âES:');
        console.log('1. Remplacer supabasePublic par supabase dans middleware/auth.js');
        console.log('2. Ou ex√©cuter le script SQL pour d√©sactiver RLS temporairement');
        console.log('3. Tester la connexion sur l\'app mobile et le dashboard');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du diagnostic:', error);
    }
}

if (require.main === module) {
    main();
}

module.exports = {
    diagnoseRLSAuthIssue,
    fixRLSAuthIssue,
    testFixedAuth
}; 